const input = read("input.txt")
const rows = stringSplit(input, "\n")
const n = len(rows)

const visited = *([([[0] * n] * n)] * 4) // 2d array for each cell, 4 times for each direction

make px, py, ex, ey = 0

do {
    set px, py = x, y when rows#y#x == 'S'
    set ex, ey = x, y when rows#y#x == 'E'
} for x in range(n) for y in range(n)

const queue = [[px, py, 0, 2]] // x, y, distance, direction (initially east)

const dx, dy = [-1, 0, 1, 0], [0, -1, 0, 1]
make min_dist = Infinity
make final_dir = 0

do {
    const q = shift(queue)
    const x, y, dist, dir = q#0, q#1, q#2, q#3

    if x == ex && y == ey then {
        if dist < min_dist then {
            set visited#dir#y#x = dist
            set min_dist = dist
            set final_dir = dir
        }
        continue
    }

    do {
        const nx, ny = x + dx#i, y + dy#i
        if nx >= 0 && nx < n && ny >= 0 && ny < n && rows#ny#nx != '#' then {
            const new_dist = dist + (dir == i ? 1 : 1001)
            if visited#i#y#x == 0 || new_dist < visited#i#y#x then {
                set visited#i#y#x = new_dist
                do push(queue, [nx, ny, new_dist, i])
            }
        }
    } for i in range(4)
} while len(queue) > 0


do sayln(`Part 1: {min_dist}`)

const shortest_paths = []
do backtrack_paths(ex, ey, final_dir, min_dist + 1)
do sayln(`Part 2: {len(removeDuplicates(shortest_paths))}`)

define backtrack_paths (x, y, dir, start_dist = null) {
    return when rows#y#x == '#'
    make dist = start_dist ?? visited#dir#y#x

    do push(shortest_paths, x + y * n)

    do {
        const nx, ny = x + dx#i, y + dy#i
        if nx >= 0 && nx < n && ny >= 0 && ny < n then {
            const inverse_dir = (i + 2) % 4
            const new_dist = dist - (dir == inverse_dir ? 1 : 1001)
            do backtrack_paths(nx, ny, inverse_dir) when visited#inverse_dir#ny#nx == new_dist
        }
    } for i in range(4)
}