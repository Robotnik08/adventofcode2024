const input = read("input.txt")
const parts = stringSplit(input, "\n\n")

const instructions = []
do push(instructions, c) for c in i for i in stringSplit(parts#1, "\n")

const ic = len(instructions)

make grid = stringSplit(parts#0, "\n")
const n = len(grid)

do sayln(`Part 1: {solveBoard(*grid, instructions)}`)


define solveBoard (grid, instructions) {
    make px, py = 0
    set px, py, grid#y#x = x, y, '.' when grid#y#x == '@' for x in range(n) for y in range(n)

    do {
        make changelist = []
        switch i => {
            '^' => {
                if pushUp(grid, px, py, changelist) then {
                    do {
                        make x, y = c % n, c / n
                        continue when x == px && y == py
                        // remove old position
                        set grid#y#x = '.'
                    } for c in changelist
                    do {
                        make x, y = c % n, c / n
                        continue when x == px && y == py
                        // add new position
                        set grid#(y - 1)#x = 'O'
                    } for c in changelist
                    set py--
                }
                break
            }
            'v' => {
                if pushDown(grid, px, py, changelist) then {
                    do {
                        make x, y = c % n, c / n
                        continue when x == px && y == py
                        // remove old position
                        set grid#y#x = '.'
                    } for c in changelist
                    do {
                        make x, y = c % n, c / n
                        continue when x == px && y == py
                        // add new position
                        set grid#(y + 1)#x = 'O'
                    } for c in changelist
                    set py++
                }
                break
            }
            '<' => {
                if pushLeft(grid, px, py, changelist) then {
                    do {
                        make x, y = c % n, c / n
                        continue when x == px && y == py
                        // remove old position
                        set grid#y#x = '.'
                    } for c in changelist
                    do {
                        make x, y = c % n, c / n
                        continue when x == px && y == py
                        // add new position
                        set grid#y#(x - 1) = 'O'
                    } for c in changelist
                    set px--
                }
                break
            }
            '>' => {
                if pushRight(grid, px, py, changelist) then {
                    do {
                        make x, y = c % n, c / n
                        continue when x == px && y == py
                        // remove old position
                        set grid#y#x = '.'
                    } for c in changelist
                    do {
                        make x, y = c % n, c / n
                        continue when x == px && y == py
                        // add new position
                        set grid#y#(x + 1) = 'O'
                    } for c in changelist
                    set px++
                }
                break
            }
        }
    } for i in instructions
    return countScore(grid)
}

define countScore (grid) {
    make score = 0
    do {
        set score += 100 * y + x when grid#y#x == 'O'
    } for x in range(n) for y in range(n)
    return score
}

define printBoard(grid, px, py) {
    make board = *grid
    do sayln(board#py#px)
    set board#py#px = '@'
    do sayln(`{stringJoin(board, "\n")}`)
}

define pushUp (grid, x, y, changelist) {
    const next = grid#(y - 1)#x
    switch next => {
        '.' => {
            do push(changelist, x + y * n)
            return true
        }
        'O' => {
            do push(changelist, x + y * n)
            return pushUp(grid, x, y - 1, changelist)
        }
        '#' => {
            return false
        }
    }
    return false
}

define pushDown (grid, x, y, changelist) {
    const at = grid#(y + 1)#x
    switch at => {
        '.' => {
            do push(changelist, x + y * n)
            return true
        }
        'O' => {
            do push(changelist, x + y * n)
            return pushDown(grid, x, y + 1, changelist)
        }
        '#' => {
            return false
        }
    }
    return false
}

define pushLeft (grid, x, y, changelist) {
    const at = grid#y#(x - 1)
    switch at => {
        '.' => {
            do push(changelist, x + y * n)
            return true
        }
        'O' => {
            do push(changelist, x + y * n)
            return pushLeft(grid, x - 1, y, changelist)
        }
        '#' => {
            return false
        }
    }
    return false
}

define pushRight (grid, x, y, changelist) {
    const at = grid#y#(x + 1)
    switch at => {
        '.' => {
            do push(changelist, x + y * n)
            return true
        }
        'O' => {
            do push(changelist, x + y * n)
            return pushRight(grid, x + 1, y, changelist)
        }
        '#' => {
            return false
        }
    }
    return false
}