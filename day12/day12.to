const input = read("input.txt")
const lines = stringSplit(input, "\n")

const n = len(lines)
const explored = *([[false] * n] * n)
make plot_id = 0
const areas, perimiters, corners = [], [], []
do {
    continue when explored#y#x
    do push(corners, 0)
    do push(perimiters, 0)
    do push(areas, flood_fill(x, y, lines#y#x))

    set plot_id++
} for x in range(n) for y in range(n)

make amount_1 = 0
set amount_1 += areas#i * perimiters#i for i in range(len(areas))
make amount_2 = 0
set amount_2 += areas#i * corners#i for i in range(len(areas))

do sayln(`Part 1: {amount_1}`)
do sayln(`Part 2: {amount_2}`)

define long flood_fill (x, y, t) {
    if !(in_bounds(x, y)) then {
        set perimiters#plot_id++
        return 0
    } else if lines#y#x != t then {
        set perimiters#plot_id++
        return 0
    } else if explored#y#x then {
        return 0
    }
    set corners#plot_id += check_corners(x, y, t)
    set explored#y#x = true
    return 1 + flood_fill(x - 1, y, t) + flood_fill(x + 1, y, t) + flood_fill(x, y - 1, t) + flood_fill(x, y + 1, t)
}

define bool in_bounds (x, y) {
    return x >= 0 && x < n && y >= 0 && y < n
}

define long check_corners (x, y, t) {
    make corners = 0

    make tl, pt, tr, pl, pr, bl, pb, br = false

    set pt = lines#(y - 1)#x == t when in_bounds(x, y - 1)              // top
    set pb = lines#(y + 1)#x == t when in_bounds(x, y + 1)              // bottom
    set pl = lines#y#(x - 1) == t when in_bounds(x - 1, y)              // left
    set pr = lines#y#(x + 1) == t when in_bounds(x + 1, y)              // right
    set tl = lines#(y - 1)#(x - 1) == t when in_bounds(x - 1, y - 1)    // top left
    set tr = lines#(y - 1)#(x + 1) == t when in_bounds(x + 1, y - 1)    // top right
    set bl = lines#(y + 1)#(x - 1) == t when in_bounds(x - 1, y + 1)    // bottom left
    set br = lines#(y + 1)#(x + 1) == t when in_bounds(x + 1, y + 1)    // bottom right

    set corners++ when !pt && !pl                                       // top left corner
    set corners++ when !pt && !pr                                       // top right corner
    set corners++ when !pb && !pl                                       // bottom left corner
    set corners++ when !pb && !pr                                       // bottom right corner
    set corners++ when !tl && pl && pt                                  // top left corner inwards
    set corners++ when !tr && pr && pt                                  // top right corner inwards
    set corners++ when !bl && pl && pb                                  // bottom left corner inwards
    set corners++ when !br && pr && pb                                  // bottom right corner inwards

    return corners
}