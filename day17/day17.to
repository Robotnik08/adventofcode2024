const input = read("input.txt")
const lines = stringSplit(input, "\n")

const registers = [0, 0, 0]
set registers#0 = substring(lines#0, 12, len(lines#0) - 1) |> stringToInt
set registers#1 = substring(lines#1, 12, len(lines#1) - 1) |> stringToInt
set registers#2 = substring(lines#2, 12, len(lines#2) - 1) |> stringToInt

const instructions = stringSplit(stringSplit(lines#(-1), " ")#1, ",")
set instructions#i |>= stringToInt for i in range(len(instructions))

do sayln(`Part 1: {stringJoin(runVm(*registers, instructions), ",")}`)
do sayln(`Part 2: {findA(0, len(instructions) - 1)}`)

define findA (next, i) {
    return next when i < 0
    do {
        const out = runVm([a, 0, 0], instructions)
        if out#0 == instructions#i then {
            const final = findA(a, i - 1)
            return final when final >= 0
        }
    } for a in range(next << 3, (next << 3) + 8)
    return -1
}

define runVm (registers, instructions) {
    make bool halt = false

    make ip = 0
    make output = []
    do {
        const opcode = instructions#ip
        set ip++
        const operant = instructions#ip
        const combo_operant = getComboOperant(operant, registers)
        set ip++

        switch opcode => {
            OpCode->adv => {
                set registers#(Register->a) /= 2 ** combo_operant
                break
            }
            OpCode->bxl => {
                set registers#(Register->b) ^= operant
                break
            }
            OpCode->bst => {
                set registers#(Register->b) = combo_operant % 8
                break
            }
            OpCode->jnz => {
                if registers#(Register->a) != 0 then {
                    set ip = operant
                }
                break
            }
            OpCode->bxc => {
                set registers#(Register->b) ^= registers#(Register->c)
                break
            }
            OpCode->out => {
                do push(output, combo_operant % 8)
                break
            }
            OpCode->bdv => {
                set registers#(Register->b) = registers#(Register->a) / (2 ** combo_operant)
                break
            }
            OpCode->cdv => {
                set registers#(Register->c) = registers#(Register->a) / (2 ** combo_operant)
                break
            }
            other => {
                do sayln(`Unknown opcode: {opcode}`) break
            }
        }

        set halt = true when ip < 0 || ip >= len(instructions)
    } until halt
    return output
}

define getComboOperant(n, r) {
    return n when n <= 3
    return r#(Register->a) when n == 4
    return r#(Register->b) when n == 5
    return r#(Register->c) when n == 6
    return 0 // n 7 isn't used
}

enum OpCode {
    adv, // Devision: numerator = rA, denominator = 2**combo_operant store in rA
    bxl, // Bitwise XOR: rB = rB ^ literal
    bst, // Modulo 8: rB = combo_operant % 8
    jnz, // Jump if not zero: if rA != 0 then ip = literal
    bxc, // Bitwise XOR: rB = rB ^ rC
    out, // Out: combo_operant % 8
    bdv, // Devision: numerator = rA, demoninator = 2**combo_operant store in rB
    cdv  // Devision: numerator = rA, demoninator = 2**combo_operant store in rC
}

enum Register {
    a,
    b,
    c
}